name: Build and Push Odoo image

# Controls when the workflow will run
on:
  push:
    branches:
      - dev  # or the branch you want to trigger the workflow on

# Define jobs for the workflow
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      # - name: Update System Dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y libsasl2-dev python3-dev libldap2-dev libssl-dev

      # - name: Install Python tools
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install setuptools wheel
      #     pip install --upgrade pip setuptools

      # - name: Cache Python dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-

      
      # - name: Install Python dependenies
      #   run: |
      #     pip install -r requirements.txt

      # - name: Build Odoo
      #   run: python setup.py build

      # Optionally, install Node.js dependencies if needed
      # - name: Install Node.js dependencies
      #   run: npm install


      - name: Login to Docker Hub
        run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
        
      - name: Build Docker image
        run: docker build -t ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}}:dev .

      - name: Push Docker image to Docker Hub
        run: docker push ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}}:dev

      # Define caching for dependencies
    # env:
    #   PIP_CACHE_DIR: ${{ github.workspace }}/.pip_cache
    #   NPM_CACHE_DIR: ${{ github.workspace }}/.npm_cache
    # cache:
    #   paths:
    #     - .pip_cache
    #     - .npm_cache
    # Define steps to execute
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
     - name: Install sshpass
       run: 'if ! command -v sshpass &> /dev/null; then sudo apt-get install -y sshpass; fi'
     - name: Pull and run Docker image
       run: |
          sshpass -p ${{secrets.SSH_PASSWORD}} ssh -o StrictHostKeyChecking=no ${{secrets.SSH_USERNAME}}@${{secrets.SSH_HOST}} "
          
          docker-compose down
          docker rmi ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}} || true
          
          docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}}:latest
          docker-compose up
          "
      # docker stop ${{secrets.DOCKER_IMAGE}}-backend-api || true
      # docker rm ${{secrets.DOCKER_IMAGE}}-backend-api || true
      # docker rmi ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}} || true
          
      # docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}}:latest
      # docker run -d -p 8070:80 --name ${{secrets.DOCKER_IMAGE}}-backend-api ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}}:latest
